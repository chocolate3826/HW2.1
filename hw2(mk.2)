#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>

#define m 12
#define p 12
#define Max_dir 8
#define Timestep 1000

typedef struct Aoff {
    short int vert;
    short int horiz;
} offsets;

typedef struct St_element {
    short int row;
    short int col;
    short int dir;
} ty_element;

typedef struct ListNode* listPointer;
typedef struct ListNode {
    ty_element data;
    listPointer link;
} listNode;

offsets move[Max_dir] = { {-1,0}, {-1,1}, {0,1}, {1,1}, {1,0}, {1,-1}, {0,-1}, {-1,-1} };

int maze[m + 2][p + 2];
int mark[m + 2][p + 2];

void gotoxy(int x, int y)
{
    COORD Pos = { x ,y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

void push(listPointer* ptr, ty_element item)
{
    listPointer temp = (listPointer)malloc(sizeof(listNode));
    temp->data = item;
    temp->link = *ptr;
    *ptr = temp;
}

ty_element pop(listPointer* ptr)
{
    listPointer temp = *ptr;
    ty_element item = (*ptr)->data;
    *ptr = (*ptr)->link;
    free(temp);
    return item;
}

int path(int sy, int sx, int dy, int dx)
{
    listPointer top = NULL;
    int i, j, row, col, nextRow, nextCol, dir, basex, basey, occount;
    int found, num_bktrack = 0, path_length = 0;
    int EXIT_ROW = dy, EXIT_COL = dx;
    ty_element position;

    if (maze[sy][sx] == 1 || maze[dy][dx] == 1) {
        printf("입력오류: 출발점이나 목표점이 막힌 셀입니다.\n");
        return 0;
    }

    CONSOLE_SCREEN_BUFFER_INFO presentCur;
    GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &presentCur);
    basex = presentCur.dwCursorPosition.X;
    basey = presentCur.dwCursorPosition.Y;

    for (i = 0; i < m + 2; i++) {
        for (j = 0; j < p + 2; j++) {
            gotoxy(j + basex, i + basey);
            if (maze[i][j] == 1)
                printf("1");
            else
                printf("0");
        }
    }

    position.row = sy;
    position.col = sx;
    position.dir = 0;
    push(&top, position);

    for (i = 0; i < m; i++) {
        for (j = 0; j < p; j++) {
            mark[1 + i][1 + j] = 0;
        }
    }

    while (top) {
        position = pop(&top);
        row = position.row;
        col = position.col;
        dir = position.dir;
        while (dir < Max_dir) {
            nextRow = row + move[dir].vert;
            nextCol = col + move[dir].horiz;
            if (nextRow == EXIT_ROW && nextCol == EXIT_COL) {
                printf("출력: 길 발견!\n");
                printf("(%d,%d)에서 (%d,%d)까지의 경로: \n", sy, sx, dy, dx);
                printf("(%d,%d)\n", row, col);
                printf("(%d,%d)\n", nextRow, nextCol);
                while (top) {
                    position = pop(&top);
                    printf("(%d,%d)\n", position.row, position.col);
                    path_length++;
                }
                printf("경로 길이: %d\n", path_length);
                return 1;
            }
            else if (!maze[nextRow][nextCol] && !mark[nextRow][nextCol]) {
                mark[nextRow][nextCol] = 1;
                position.row = row; position.col = col;
                position.dir = ++dir;
                push(&top, position);
                row = nextRow; col = nextCol; dir = 0;
                gotoxy(col + basex, row + basey);
                printf("*");
                Sleep(Timestep);
            }
            else ++dir;
        }
    }

    printf("출력: 출구를 찾을 수 없습니다.\n");
    return 0;

}

int main() {
    int i, j, sy, sx, dy, dx;
    char ch;
    FILE* fp = NULL;

    fp = fopen("maze_14_2.txt", "r");
    if (fp == NULL) {
        printf("파일 오류: 파일을 열 수 없습니다.\n");
        return 1;
    }

    for (i = 0; i < m + 2; i++) {
        for (j = 0; j < p + 2; j++) {
            ch = getc(fp);
            while (ch == '\n' || ch == '\r') {
                ch = getc(fp);
            }
            maze[i][j] = ch - '0';
            mark[i][j] = 0;
        }
    }
    fclose(fp);

    printf("입력: 미로의 출발점과 도착점을 입력하세요.\n");
    printf("입력: 출발점 (행,열) 도착점 (행,열):: ");
    scanf("%d %d %d %d", &sy, &sx, &dy, &dx);

    if (!path(sy, sx, dy, dx)) {
        printf("입력오류: 출구를 찾을 수 없습니다.\n");
    }
    return 0;
}
